generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id   String @id
  /// @type {import("../../types/src/Shop").Shop}
  data Json
  pages Page[]
}

model Page {
  id     String @id @default(cuid())
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String
  slug   String
  data   Json
}

model RentalOrder {
  id                 String @id
  shop               String
  sessionId          String
  deposit            Int
  expectedReturnDate String?
  startedAt          String
  returnedAt         String?
  refundedAt         String?
  damageFee          Int?
  customerId         String?
  riskLevel          String?
  riskScore          Int?
  flaggedForReview   Boolean? @default(false)
  trackingNumber     String?
  labelUrl           String?
  returnStatus       String?
  returnDueDate      String?
  returnReceivedAt   String?
  lateFeeCharged     Int?

  @@unique([shop, sessionId])
  @@unique([shop, trackingNumber])
  @@index([customerId])
}

model SubscriptionUsage {
  id         String @id @default(cuid())
  shop       String
  customerId String
  month      String
  shipments  Int    @default(0)

  @@unique([shop, customerId, month])
}

model CustomerProfile {
  customerId String @id
  name       String
  email      String
}

model CustomerMfa {
  customerId String @id
  secret     String
  enabled    Boolean @default(false)
}

model User {
  id           String  @id
  email        String  @unique
  passwordHash String
  role         String
  resetToken   String?
  resetTokenExpiresAt DateTime?
  emailVerified Boolean @default(false)
  stripeSubscriptionId String?
}

model ReverseLogisticsEvent {
  id        String @id @default(cuid())
  shop      String
  sessionId String
  event     String
  createdAt String

  @@index([shop])
}
