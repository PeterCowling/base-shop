[{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/returnLogistics.cache.test.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'security/detect-non-literal-fs-filename').","line":2,"column":1,"severity":1,"nodeType":null,"fix":{"range":[30,90],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/** @jest-environment node */\n/* eslint-disable security/detect-non-literal-fs-filename */\n\nimport { promises as fs } from \"node:fs\";\nimport * as os from \"node:os\";\nimport * as path from \"node:path\";\n\ndescribe(\"getReturnLogistics cache\", () => {\n  afterEach(() => {\n    jest.resetModules();\n    jest.restoreAllMocks();\n    delete process.env.DATA_ROOT;\n  });\n\n  it(\"reads configuration once and caches result\", async () => {\n    const cfg = {\n      labelService: \"ups\",\n      inStore: true,\n      dropOffProvider: \"happy-returns\",\n      tracking: true,\n      bagType: \"reusable\",\n      returnCarrier: [\"ups\"],\n      homePickupZipCodes: [\"12345\"],\n      mobileApp: true,\n      requireTags: true,\n      allowWear: false,\n    };\n\n    const spy = jest\n      .spyOn(fs, \"readFile\")\n      .mockResolvedValue(JSON.stringify(cfg) as any);\n\n    const { getReturnLogistics } = await import(\"../src/returnLogistics\");\n    const first = await getReturnLogistics();\n    const second = await getReturnLogistics();\n\n    expect(first).toEqual(cfg);\n    expect(second).toBe(first);\n    expect(spy).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"propagates ENOENT errors\", async () => {\n    const err = Object.assign(new Error(\"missing\"), { code: \"ENOENT\" });\n    jest.spyOn(fs, \"readFile\").mockRejectedValue(err);\n    const { getReturnLogistics } = await import(\"../src/returnLogistics\");\n    await expect(getReturnLogistics()).rejects.toBe(err);\n  });\n\n  it(\"throws on invalid JSON\", async () => {\n    jest.spyOn(fs, \"readFile\").mockResolvedValue(\"not-json\" as any);\n    const { getReturnLogistics } = await import(\"../src/returnLogistics\");\n    await expect(getReturnLogistics()).rejects.toBeInstanceOf(SyntaxError);\n  });\n\n  it(\"reloads configuration after cache reset\", async () => {\n    const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"rl-cache-\"));\n    const dataDir = path.join(dir, \"data\");\n    const shopsDir = path.join(dataDir, \"shops\");\n    await fs.mkdir(shopsDir, { recursive: true });\n    const file = path.join(dataDir, \"return-logistics.json\");\n\n    const cfg = {\n      labelService: \"ups\",\n      inStore: true,\n      dropOffProvider: \"happy-returns\",\n      tracking: true,\n      bagType: \"reusable\",\n      returnCarrier: [\"ups\"],\n      homePickupZipCodes: [\"12345\"],\n      mobileApp: true,\n      requireTags: true,\n      allowWear: false,\n    };\n\n    await fs.writeFile(file, JSON.stringify(cfg), \"utf8\");\n    process.env.DATA_ROOT = shopsDir;\n\n    const spy = jest.spyOn(fs, \"readFile\");\n    const { getReturnLogistics } = await import(\"../src/returnLogistics\");\n    const first = await getReturnLogistics();\n    expect(first).toEqual(cfg);\n    expect(spy).toHaveBeenCalledTimes(1);\n\n    const updated = { ...cfg, mobileApp: false };\n    await fs.writeFile(file, JSON.stringify(updated), \"utf8\");\n\n    jest.resetModules();\n    const { getReturnLogistics: fresh } = await import(\"../src/returnLogistics\");\n    const second = await fresh();\n\n    expect(second).toEqual(updated);\n    expect(spy).toHaveBeenCalledTimes(2);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/returnLogistics.test.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'security/detect-non-literal-fs-filename').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,60],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable security/detect-non-literal-fs-filename */\nimport { promises as fs } from \"node:fs\";\nimport os from \"node:os\";\nimport path from \"node:path\";\nimport { ZodError } from \"zod\";\n\nasync function withTempDir(\n  cb: (\n    mod: typeof import(\"../src/returnLogistics\"),\n    dir: string\n  ) => Promise<void>\n) {\n  const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"return-\"));\n  await fs.mkdir(path.join(dir, \"data\"), { recursive: true });\n\n  const cwd = process.cwd();\n  process.chdir(dir);\n  jest.resetModules();\n\n  const mod = await import(\"../src/returnLogistics\");\n  try {\n    await cb(mod, dir);\n  } finally {\n    process.chdir(cwd);\n  }\n}\n\nasync function withConfig(\n  config: any,\n  cb: (mod: typeof import(\"../src/returnLogistics\")) => Promise<void>\n) {\n  await withTempDir(async (mod, dir) => {\n    await fs.writeFile(\n      path.join(dir, \"data\", \"return-logistics.json\"),\n      JSON.stringify(config, null, 2),\n      \"utf8\"\n    );\n    await cb(mod);\n  });\n}\n\ndescribe(\"return logistics config\", () => {\n  it(\"parses file once and caches result\", async () => {\n    const cfg = {\n      labelService: \"ups\",\n      inStore: true,\n      bagType: \"reusable\",\n      returnCarrier: [\"ups\"],\n      homePickupZipCodes: [],\n      requireTags: true,\n      allowWear: false,\n    };\n    await withConfig(cfg, async ({ getReturnLogistics }) => {\n      const first = await getReturnLogistics();\n      const second = await getReturnLogistics();\n      expect(first).toEqual(cfg);\n      expect(second).toBe(first);\n    });\n  });\n\n  it(\"rejects when file missing and does not cache failure\", async () => {\n    const cfg = {\n      labelService: \"ups\",\n      inStore: true,\n      bagType: \"reusable\",\n      returnCarrier: [\"ups\"],\n      homePickupZipCodes: [],\n      requireTags: true,\n      allowWear: false,\n    };\n    await withTempDir(async ({ getReturnLogistics }, dir) => {\n      const readFile = jest\n        .spyOn(fs, \"readFile\")\n        .mockRejectedValueOnce(Object.assign(new Error(\"ENOENT\"), { code: \"ENOENT\" }))\n        .mockResolvedValueOnce(JSON.stringify(cfg));\n\n      await expect(getReturnLogistics()).rejects.toThrow();\n      expect(readFile).toHaveBeenCalledTimes(1);\n\n      const result = await getReturnLogistics();\n      expect(result).toEqual(cfg);\n      expect(readFile).toHaveBeenCalledTimes(2);\n      readFile.mockRestore();\n    });\n  });\n\n  it(\"rejects invalid JSON and does not cache failure\", async () => {\n    const valid = {\n      labelService: \"ups\",\n      inStore: true,\n      bagType: \"reusable\",\n      returnCarrier: [\"ups\"],\n      homePickupZipCodes: [],\n      requireTags: true,\n      allowWear: false,\n    };\n    const invalid = {\n      labelService: 123,\n      inStore: true,\n      bagType: \"reusable\",\n      returnCarrier: [\"ups\"],\n      homePickupZipCodes: [],\n      requireTags: true,\n      allowWear: false,\n    } as any;\n    await withTempDir(async ({ getReturnLogistics }, dir) => {\n      const readFile = jest\n        .spyOn(fs, \"readFile\")\n        .mockResolvedValueOnce(JSON.stringify(invalid))\n        .mockResolvedValueOnce(JSON.stringify(valid));\n\n      await expect(getReturnLogistics()).rejects.toThrow();\n      expect(readFile).toHaveBeenCalledTimes(1);\n\n      const result = await getReturnLogistics();\n      expect(result).toEqual(valid);\n      expect(readFile).toHaveBeenCalledTimes(2);\n      readFile.mockRestore();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/settingsRepo.test.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'security/detect-non-literal-fs-filename').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,60],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable security/detect-non-literal-fs-filename */\nimport { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { LOCALES } from \"@acme/i18n/locales\";\nimport { withTempRepo } from \"@acme/test-utils\";\n\njest.mock(\"@acme/date-utils\", () => ({ nowIso: jest.fn(() => \"2000-01-01T00:00:00.000Z\") }));\n\njest.setTimeout(20_000);\n\nconst withRepo = (\n  cb: (\n    repo: typeof import(\"../src/repositories/settings.server\"),\n    shop: string,\n    dir: string\n  ) => Promise<void>\n) =>\n  withTempRepo(async (dir) => {\n    const repo = await import(\"../src/repositories/settings.server\");\n    await cb(repo, \"test\", dir);\n  }, { prefix: 'settings-' });\n\ndescribe(\"settings repository\", () => {\n  it(\"reads existing settings and merges defaults\", async () => {\n    await withRepo(async (repo, shop, dir) => {\n      const file = path.join(dir, \"data\", \"shops\", shop, \"settings.json\");\n      await fs.writeFile(\n        file,\n        JSON.stringify({\n          languages: [\"en\"],\n          seo: {},\n          updatedAt: \"\",\n          updatedBy: \"\",\n          currency: \"USD\",\n          stockAlert: { recipients: [\"a@example.com\"] },\n        }),\n        \"utf8\"\n      );\n      const settings = await repo.getShopSettings(shop);\n      expect(settings.currency).toBe(\"USD\");\n      expect(settings.languages).toEqual([\"en\"]);\n      expect(settings.depositService).toEqual({ enabled: false, intervalMinutes: 60 });\n      expect(settings.stockAlert.recipients).toEqual([\"a@example.com\"]);\n      expect(settings.freezeTranslations).toBe(false);\n    });\n  });\n\n  it(\"returns defaults when read fails\", async () => {\n    await withRepo(async (repo, shop) => {\n      jest\n        .spyOn(fs, \"readFile\")\n        .mockRejectedValueOnce(new Error(\"fail\"));\n      const settings = await repo.getShopSettings(shop);\n      expect(settings.currency).toBe(\"EUR\");\n      expect(settings.languages).toEqual(LOCALES);\n    });\n  });\n\n  it(\"saveShopSettings writes tmp file and history entry\", async () => {\n    await withRepo(async (repo, shop, dir) => {\n      const writeSpy = jest.spyOn(fs, \"writeFile\");\n      const renameSpy = jest.spyOn(fs, \"rename\");\n      const appendSpy = jest.spyOn(fs, \"appendFile\");\n\n      const initial = await repo.getShopSettings(shop);\n      const updated = { ...initial, currency: \"USD\" };\n      await repo.saveShopSettings(shop, updated);\n\n      expect(writeSpy).toHaveBeenCalled();\n      const tmpPath = (writeSpy.mock.calls[0] as any)[0];\n      expect(tmpPath).toMatch(/settings\\.json\\.\\d+\\.tmp$/);\n      const { DATA_ROOT } = await import(\"../src/dataRoot\");\n      expect(renameSpy).toHaveBeenCalledWith(\n        tmpPath,\n        path.join(DATA_ROOT, shop, \"settings.json\")\n      );\n      expect(appendSpy).toHaveBeenCalled();\n\n      const history = await fs.readFile(\n        path.join(dir, \"data\", \"shops\", shop, \"settings.history.jsonl\"),\n        \"utf8\"\n      );\n      const entry = JSON.parse(history.trim());\n      expect(entry.timestamp).toBe(\"2000-01-01T00:00:00.000Z\");\n      expect(entry.diff).toEqual({ currency: \"USD\" });\n      writeSpy.mockRestore();\n      renameSpy.mockRestore();\n      appendSpy.mockRestore();\n    });\n  });\n\n  it(\"diffHistory handles valid, invalid, and missing files\", async () => {\n    await withRepo(async (repo, shop, dir) => {\n      const historyFile = path.join(\n        dir,\n        \"data\",\n        \"shops\",\n        shop,\n        \"settings.history.jsonl\"\n      );\n      const valid = {\n        timestamp: \"2000-01-01T00:00:00.000Z\",\n        diff: { currency: \"USD\" },\n      };\n      await fs.writeFile(historyFile, JSON.stringify(valid) + \"\\n\", \"utf8\");\n      expect(await repo.diffHistory(shop)).toEqual([valid]);\n\n      await fs.writeFile(historyFile, \"not-json\\n\", \"utf8\");\n      expect(await repo.diffHistory(shop)).toEqual([]);\n\n      expect(await repo.diffHistory(\"missing\")).toEqual([]);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/shopRepository.test.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'security/detect-non-literal-fs-filename').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,60],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable security/detect-non-literal-fs-filename */\nimport fs from \"node:fs/promises\";\nimport path from \"node:path\";\nimport { withTempRepo } from \"@acme/test-utils\";\n\nconst withRepo = (cb: (dir: string) => Promise<void>) =>\n  withTempRepo(cb, { prefix: 'shoprepo-' });\n\ndescribe(\"shop repository\", () => {\n  it(\"persists themeDefaults\", async () => {\n    await withRepo(async (dir) => {\n      const shopFile = path.join(dir, \"data\", \"shops\", \"test\", \"shop.json\");\n      await fs.writeFile(\n        shopFile,\n        JSON.stringify(\n          {\n            id: \"test\",\n            name: \"Seed\",\n            catalogFilters: [],\n            themeId: \"base\",\n            themeOverrides: {},\n            filterMappings: {},\n            priceOverrides: {},\n            localeOverrides: {},\n          },\n          null,\n          2,\n        ),\n      );\n\n      jest.doMock(\"../src/db\", () => ({\n        prisma: {\n          shop: {\n            findUnique: jest.fn().mockResolvedValue(null),\n            upsert: jest.fn().mockRejectedValue(new Error(\"no db\")),\n          },\n        },\n      }));\n\n      const { updateShopInRepo } = await import(\"../src/repositories/shop.server\");\n      const { readShop } = await import(\"../src/repositories/shops.server\");\n\n      const defaults = { base: \"default\", accent: \"blue\" };\n      const overrides = { accent: \"red\" };\n\n      await updateShopInRepo(\"test\", {\n        id: \"test\",\n        themeDefaults: defaults,\n        themeOverrides: overrides,\n        themeTokens: { ...defaults, ...overrides },\n      });\n\n      const saved = await readShop(\"test\");\n      expect(saved.themeDefaults).toEqual(defaults);\n      expect(saved.themeTokens).toEqual({ ...defaults, ...overrides });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/shops.read.server.test.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'security/detect-non-literal-fs-filename').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,60],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable security/detect-non-literal-fs-filename */\nimport fs from \"node:fs/promises\";\nimport path from \"node:path\";\nimport { withTempRepo } from \"@acme/test-utils\";\n\n// Single-purpose tests for readShop behaviour\n\nconst withRepo = (cb: (dir: string) => Promise<void>) =>\n  withTempRepo(cb, { prefix: \"shoprepo-\" });\n\ndescribe(\"readShop\", () => {\n  afterEach(() => {\n    jest.resetModules();\n    jest.dontMock(\"../src/repositories/shop.server\");\n  });\n\n  it(\"reads from the database and applies theme data\", async () => {\n    await jest.isolateModulesAsync(async () => {\n      jest.doMock(\"../src/repositories/shop.server\", () => ({\n        getShopById: jest.fn().mockResolvedValue({\n          id: \"test\",\n          name: \"DB\",\n          catalogFilters: [],\n          themeId: \"base\",\n          themeDefaults: { \"--color-accent\": \"red\" },\n          themeOverrides: { \"--color-accent\": \"blue\" },\n          filterMappings: {},\n          priceOverrides: {},\n          localeOverrides: {},\n        }),\n        updateShopInRepo: jest.fn(),\n      }));\n\n      const { readShop } = await import(\"../src/repositories/shops.server\");\n      const result = await readShop(\"test\");\n      expect(result.themeDefaults).toEqual({ \"--color-accent\": \"red\" });\n      expect(result.themeTokens).toEqual({ \"--color-accent\": \"blue\" });\n    });\n  });\n\n  it(\"reads from the filesystem when the database is unavailable\", async () => {\n    await withRepo(async (dir) => {\n      process.env.SHOP_BACKEND = \"json\";\n      delete process.env.DATABASE_URL;\n      const shopFile = path.join(dir, \"data\", \"shops\", \"test\", \"shop.json\");\n      await fs.writeFile(\n        shopFile,\n        JSON.stringify(\n          {\n            id: \"test\",\n            name: \"Seed\",\n            catalogFilters: [],\n            themeId: \"base\",\n            themeDefaults: { accent: \"blue\" },\n            themeOverrides: { accent: \"green\" },\n            filterMappings: {},\n            priceOverrides: {},\n            localeOverrides: {},\n          },\n          null,\n          2,\n        ),\n      );\n\n      const { readShop } = await import(\"../src/repositories/shops.server\");\n      const result = await readShop(\"test\");\n      expect(result.name).toBe(\"Seed\");\n      expect(result.themeTokens).toEqual({ accent: \"green\" });\n      delete process.env.SHOP_BACKEND;\n    });\n  });\n\n  it(\"returns default shop when file is missing\", async () => {\n    await withRepo(async () => {\n      process.env.SHOP_BACKEND = \"json\";\n      delete process.env.DATABASE_URL;\n      const loadThemeTokens = jest.fn().mockResolvedValue({ fromTheme: \"t\" });\n      jest.doMock(\"../src/themeTokens/index\", () => ({\n        baseTokens: { base: \"b\" },\n        loadThemeTokens,\n      }));\n      const { readShop } = await import(\"../src/repositories/shops.server\");\n      const result = await readShop(\"test\");\n      expect(loadThemeTokens).toHaveBeenCalledWith(\"base\");\n      expect(result.themeDefaults).toEqual({ base: \"b\", fromTheme: \"t\" });\n      expect(result.themeTokens).toEqual({ base: \"b\", fromTheme: \"t\" });\n      delete process.env.SHOP_BACKEND;\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/shops.write.server.test.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'security/detect-non-literal-fs-filename').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,60],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable security/detect-non-literal-fs-filename */\nimport fs from \"node:fs/promises\";\nimport path from \"node:path\";\nimport { withTempRepo } from \"@acme/test-utils\";\n\n// Single-purpose tests for writeShop behaviour\n\nconst withRepo = (cb: (dir: string) => Promise<void>) =>\n  withTempRepo(cb, { prefix: \"shoprepo-\" });\n\ndescribe(\"writeShop\", () => {\n  afterEach(() => {\n    jest.resetModules();\n    jest.dontMock(\"../src/repositories/shop.server\");\n  });\n\n  it(\"merges theme data and removes duplicate overrides\", async () => {\n    await withRepo(async (dir) => {\n      process.env.SHOP_BACKEND = \"json\";\n      delete process.env.DATABASE_URL;\n      const shopFile = path.join(dir, \"data\", \"shops\", \"test\", \"shop.json\");\n      await fs.writeFile(\n        shopFile,\n        JSON.stringify(\n          {\n            id: \"test\",\n            name: \"Seed\",\n            catalogFilters: [],\n            themeId: \"base\",\n            themeDefaults: { accent: \"blue\" },\n            themeOverrides: {},\n            filterMappings: {},\n            priceOverrides: {},\n            localeOverrides: {},\n          },\n          null,\n          2,\n        ),\n      );\n\n      const { writeShop } = await import(\"../src/repositories/shops.server\");\n      const result = await writeShop(\"test\", {\n        id: \"test\",\n        themeDefaults: { accent: \"red\" },\n        themeOverrides: { accent: \"red\", extra: \"green\", drop: null },\n      });\n      expect(result.themeDefaults).toEqual({ accent: \"red\" });\n      expect(result.themeOverrides).toEqual({ extra: \"green\" });\n      expect(result.themeTokens).toEqual({ accent: \"red\", extra: \"green\" });\n      expect(result.navigation).toEqual([]);\n      delete process.env.SHOP_BACKEND;\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/shopsRoute.test.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'security/detect-non-literal-fs-filename').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,60],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable security/detect-non-literal-fs-filename */\nimport fs from \"node:fs/promises\";\nimport os from \"node:os\";\nimport path from \"node:path\";\n\n/** Creates a temp dir, runs cb, restores CWD */\nasync function withTmpRepo(cb: (dir: string) => Promise<void>): Promise<void> {\n  const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"shops-api-\"));\n  const cwd = process.cwd();\n  process.chdir(dir);\n  jest.resetModules();\n  try {\n    await cb(dir);\n  } finally {\n    process.chdir(cwd);\n  }\n}\n\nafterEach(() => jest.resetAllMocks());\n\ndescribe(\"GET /api/shops\", () => {\n  it(\"lists shop directories\", async () => {\n    await withTmpRepo(async (dir) => {\n      const shopsDir = path.join(dir, \"data\", \"shops\");\n      await fs.mkdir(path.join(shopsDir, \"shop1\"), { recursive: true });\n      await fs.mkdir(path.join(shopsDir, \"shop2\"));\n\n      const { GET } = await import(\"../../../apps/cms/src/app/api/shops/route\");\n      const res = await GET();\n      expect(await res.json()).toEqual(\n        expect.arrayContaining([\"shop1\", \"shop2\"])\n      );\n    });\n  });\n\n  it(\"returns empty array when directory empty\", async () => {\n    await withTmpRepo(async (dir) => {\n      await fs.mkdir(path.join(dir, \"data\", \"shops\"), { recursive: true });\n\n      const { GET } = await import(\"../../../apps/cms/src/app/api/shops/route\");\n      const res = await GET();\n      expect(await res.json()).toEqual([]);\n    });\n  });\n\n  it(\"returns empty array when directory missing\", async () => {\n    await withTmpRepo(async () => {\n      const { GET } = await import(\"../../../apps/cms/src/app/api/shops/route\");\n      const res = await GET();\n      expect(await res.json()).toEqual([]);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/themeTokens.test.ts","messages":[],"suppressedMessages":[{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#000'.","line":20,"column":24,"nodeType":"Literal","messageId":"noRawColor","endLine":20,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#000'.","line":38,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":38,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#111'.","line":93,"column":24,"nodeType":"Literal","messageId":"noRawColor","endLine":93,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#111'.","line":97,"column":46,"nodeType":"Literal","messageId":"noRawColor","endLine":97,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#fff'.","line":134,"column":7,"nodeType":"Literal","messageId":"noRawColor","endLine":134,"endColumn":67,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#fff'.","line":137,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":137,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#456'.","line":149,"column":7,"nodeType":"Literal","messageId":"noRawColor","endLine":149,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#456'.","line":152,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":152,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#123'.","line":164,"column":7,"nodeType":"Literal","messageId":"noRawColor","endLine":164,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#123'.","line":167,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":167,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#bcd'.","line":190,"column":24,"nodeType":"Literal","messageId":"noRawColor","endLine":190,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#bcd'.","line":195,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":195,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#def'.","line":204,"column":7,"nodeType":"Literal","messageId":"noRawColor","endLine":204,"endColumn":67,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#def'.","line":207,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":207,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]