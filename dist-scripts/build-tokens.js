"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// scripts/build-tokens.ts
/* eslint-disable no-console */
var node_fs_1 = require("node:fs");
var node_path_1 = require("node:path");
var node_vm_1 = require("node:vm");
var typescript_1 = __importDefault(require("typescript"));
var tokens_1 = require("../packages/themes/base/tokens");
/**
 * Create a plain-value stylesheet (no CSS variables).
 */
function generateStaticCss(map) {
    var css = "/* Generated by build-tokens.ts */\n\n:root {\n";
    for (var _i = 0, _a = Object.entries(map); _i < _a.length; _i++) {
        var _b = _a[_i], name_1 = _b[0], defs = _b[1];
        css += "  ".concat(name_1, ": ").concat(defs.light, ";\n");
    }
    css += "}\n";
    var darkEntries = Object.entries(map).filter(
    // narrow: keep only tokens that *do* define `dark`
    function (entry) {
        return entry[1].dark !== undefined;
    });
    if (darkEntries.length) {
        css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
        for (var _c = 0, darkEntries_1 = darkEntries; _c < darkEntries_1.length; _c++) {
            var _d = darkEntries_1[_c], name_2 = _d[0], defs = _d[1];
            css += "    ".concat(name_2, ": ").concat(defs.dark, ";\n");
        }
        css += "  }\n}\n";
        css += "html.theme-dark {\n";
        for (var _e = 0, darkEntries_2 = darkEntries; _e < darkEntries_2.length; _e++) {
            var _f = darkEntries_2[_e], name_3 = _f[0], defs = _f[1];
            css += "  ".concat(name_3, ": ").concat(defs.dark, ";\n");
        }
        css += "}\n";
    }
    return css;
}
/**
 * Create a CSS-variable stylesheet so end-users can override tokens.
 */
function generateDynamicCss(map) {
    var css = "/* Generated by build-tokens.ts */\n\n:root {\n";
    for (var _i = 0, _a = Object.entries(map); _i < _a.length; _i++) {
        var _b = _a[_i], name_4 = _b[0], defs = _b[1];
        var varName = "--token-".concat(name_4.slice(2));
        css += "  ".concat(name_4, ": var(").concat(varName, ", ").concat(defs.light, ");\n");
    }
    css += "}\n";
    var darkEntries = Object.entries(map).filter(function (entry) {
        return entry[1].dark !== undefined;
    });
    if (darkEntries.length) {
        css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
        for (var _c = 0, darkEntries_3 = darkEntries; _c < darkEntries_3.length; _c++) {
            var _d = darkEntries_3[_c], name_5 = _d[0], defs = _d[1];
            var varName = "--token-".concat(name_5.slice(2), "-dark");
            css += "    ".concat(name_5, ": var(").concat(varName, ", ").concat(defs.dark, ");\n");
        }
        css += "  }\n}\n";
        css += "html.theme-dark {\n";
        for (var _e = 0, darkEntries_4 = darkEntries; _e < darkEntries_4.length; _e++) {
            var _f = darkEntries_4[_e], name_6 = _f[0], defs = _f[1];
            var varName = "--token-".concat(name_6.slice(2), "-dark");
            css += "  ".concat(name_6, ": var(").concat(varName, ", ").concat(defs.dark, ");\n");
        }
        css += "}\n";
    }
    return css;
}
var outDir = (0, node_path_1.join)(__dirname, "..", "packages", "themes", "base");
(0, node_fs_1.writeFileSync)((0, node_path_1.join)(outDir, "tokens.static.css"), generateStaticCss(tokens_1.tokens));
(0, node_fs_1.writeFileSync)((0, node_path_1.join)(outDir, "tokens.dynamic.css"), generateDynamicCss(tokens_1.tokens));
console.log("→ tokens.static.css and tokens.dynamic.css generated");
/* -------------------------------------------------------------------------- */
/*  Additional theme tokens                                                   */
/* -------------------------------------------------------------------------- */
function generateThemeCss(map) {
    var css = "/* Generated by build-tokens.ts */\n\n:root {\n";
    for (var _i = 0, _a = Object.entries(map); _i < _a.length; _i++) {
        var _b = _a[_i], name_7 = _b[0], val = _b[1];
        css += "  ".concat(name_7, ": ").concat(val, ";\n");
    }
    css += "}\n";
    return css;
}
function buildThemeCss() {
    return __awaiter(this, void 0, void 0, function () {
        var themesDir, themes, _i, themes_1, theme, modPath, source, transpiled, sandbox, themeTokens, css;
        return __generator(this, function (_a) {
            themesDir = (0, node_path_1.join)(__dirname, "..", "packages", "themes");
            themes = (0, node_fs_1.readdirSync)(themesDir, { withFileTypes: true })
                .filter(function (d) { return d.isDirectory() && d.name !== "base"; })
                .map(function (d) { return d.name; });
            for (_i = 0, themes_1 = themes; _i < themes_1.length; _i++) {
                theme = themes_1[_i];
                modPath = (0, node_path_1.join)(themesDir, theme, "tailwind-tokens.ts");
                source = (0, node_fs_1.readFileSync)(modPath, "utf8");
                transpiled = typescript_1.default.transpileModule(source, {
                    compilerOptions: { module: typescript_1.default.ModuleKind.CommonJS },
                }).outputText;
                sandbox = {
                    module: { exports: {} },
                    exports: {},
                    require: require,
                };
                sandbox.exports = sandbox.module.exports;
                (0, node_vm_1.runInNewContext)(transpiled, sandbox);
                themeTokens = sandbox.module.exports.tokens;
                css = generateThemeCss(themeTokens);
                (0, node_fs_1.writeFileSync)((0, node_path_1.join)(themesDir, theme, "tokens.css"), css);
            }
            return [2 /*return*/];
        });
    });
}
void buildThemeCss()
    .then(function () {
    console.log("→ theme tokens generated");
})
    .catch(function (err) {
    console.error(err);
    process.exit(1);
});
