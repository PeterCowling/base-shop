// Minimal copies of the CSS generation helpers from scripts/src/build-tokens.ts
function generateStaticCss(map: Record<string, any>): string {
  let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
  const darkEntries: [string, { light: string; dark: string }][] = [];
  for (const [name, defs] of Object.entries(map)) {
    css += `  ${name}: ${defs.light};\n`;
    if (defs.dark !== undefined) {
      css += `  ${name}-dark: ${defs.dark};\n`;
      darkEntries.push([name, defs as { light: string; dark: string }]);
    }
  }
  css += "}\n";

  if (darkEntries.length) {
    css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
    for (const [name] of darkEntries) {
      css += `    ${name}: var(${name}-dark);\n`;
    }
    css += "  }\n}\n";

    css += "\nhtml.theme-dark {\n";
    for (const [name] of darkEntries) {
      css += `  ${name}: var(${name}-dark);\n`;
    }
    css += "}\n";
  }
  return css;
}

function generateDynamicCss(map: Record<string, any>): string {
  let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
  const darkEntries: [string, { light: string; dark: string }][] = [];
  for (const [name, defs] of Object.entries(map)) {
    const varName = `--token-${name.slice(2)}`;
    css += `  ${name}: var(${varName}, ${defs.light});\n`;
    if (defs.dark !== undefined) {
      const darkVar = `--token-${name.slice(2)}-dark`;
      css += `  ${name}-dark: var(${darkVar}, ${defs.dark});\n`;
      darkEntries.push([name, defs as { light: string; dark: string }]);
    }
  }
  css += "}\n";

  if (darkEntries.length) {
    css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
    for (const [name] of darkEntries) {
      css += `    ${name}: var(${name}-dark);\n`;
    }
    css += "  }\n}\n";

    css += "\nhtml.theme-dark {\n";
    for (const [name] of darkEntries) {
      css += `  ${name}: var(${name}-dark);\n`;
    }
    css += "}\n";
  }
  return css;
}

function generateThemeCss(map: Record<string, string>): string {
  let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
  const darkEntries: [string, string][] = [];
  for (const [name, val] of Object.entries(map)) {
    css += `  ${name}: ${val};\n`;
    if (name.endsWith("-dark")) {
      const base = name.replace(/-dark$/, "");
      if (map[base] !== undefined) {
        darkEntries.push([base, name]);
      }
    }
  }
  css += "}\n";

  if (darkEntries.length) {
    css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
    for (const [base, dark] of darkEntries) {
      css += `    ${base}: var(${dark});\n`;
    }
    css += "  }\n}\n";

    css += "\nhtml.theme-dark {\n";
    for (const [base, dark] of darkEntries) {
      css += `  ${base}: var(${dark});\n`;
    }
    css += "}\n";
  }

  return css;
}

describe("token css generators", () => {
  const tokens = {
    "--color-text": { light: "#000", dark: "#fff" },
    "--spacing-lg": { light: "1rem" },
  };
  it("creates static css with dark mode", () => {
    const css = generateStaticCss(tokens as any);
    expect(css).toContain("--color-text: #000;");
    expect(css).toContain("@media (prefers-color-scheme: dark)");
    expect(css).toContain("--color-text-dark: #fff;");
    expect(css).toContain("--spacing-lg: 1rem;");
  });

  it("creates dynamic css using variables", () => {
    const css = generateDynamicCss(tokens as any);
    expect(css).toContain("--color-text: var(--token-color-text, #000);");
    expect(css).toContain(
      "--color-text-dark: var(--token-color-text-dark, #fff);"
    );
  });

  it("creates theme css", () => {
    const css = generateThemeCss({ "--bg": "red" });
    expect(css).toContain(":root");
    expect(css).toContain("--bg: red;");
  });
});
