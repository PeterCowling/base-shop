"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// scripts/build-tokens.ts
/* eslint-disable no-console */
var node_fs_1 = require("node:fs");
var node_path_1 = require("node:path");
var tokens_1 = require("../packages/themes/base/tokens");
/**
 * Create a plain-value stylesheet (no CSS variables).
 */
function generateStaticCss(map) {
    var css = "/* Generated by build-tokens.ts */\n\n:root {\n";
    for (var _i = 0, _a = Object.entries(map); _i < _a.length; _i++) {
        var _b = _a[_i], name_1 = _b[0], defs = _b[1];
        css += "  ".concat(name_1, ": ").concat(defs.light, ";\n");
    }
    css += "}\n";
    var darkEntries = Object.entries(map).filter(
    // narrow: keep only tokens that *do* define `dark`
    function (entry) {
        return entry[1].dark !== undefined;
    });
    if (darkEntries.length) {
        css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
        for (var _c = 0, darkEntries_1 = darkEntries; _c < darkEntries_1.length; _c++) {
            var _d = darkEntries_1[_c], name_2 = _d[0], defs = _d[1];
            css += "    ".concat(name_2, ": ").concat(defs.dark, ";\n");
        }
        css += "  }\n}\n";
        css += "html.theme-dark {\n";
        for (var _e = 0, darkEntries_2 = darkEntries; _e < darkEntries_2.length; _e++) {
            var _f = darkEntries_2[_e], name_3 = _f[0], defs = _f[1];
            css += "  ".concat(name_3, ": ").concat(defs.dark, ";\n");
        }
        css += "}\n";
    }
    return css;
}
/**
 * Create a CSS-variable stylesheet so end-users can override tokens.
 */
function generateDynamicCss(map) {
    var css = "/* Generated by build-tokens.ts */\n\n:root {\n";
    for (var _i = 0, _a = Object.entries(map); _i < _a.length; _i++) {
        var _b = _a[_i], name_4 = _b[0], defs = _b[1];
        var varName = "--token-".concat(name_4.slice(2));
        css += "  ".concat(name_4, ": var(").concat(varName, ", ").concat(defs.light, ");\n");
    }
    css += "}\n";
    var darkEntries = Object.entries(map).filter(function (entry) {
        return entry[1].dark !== undefined;
    });
    if (darkEntries.length) {
        css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
        for (var _c = 0, darkEntries_3 = darkEntries; _c < darkEntries_3.length; _c++) {
            var _d = darkEntries_3[_c], name_5 = _d[0], defs = _d[1];
            var varName = "--token-".concat(name_5.slice(2), "-dark");
            css += "    ".concat(name_5, ": var(").concat(varName, ", ").concat(defs.dark, ");\n");
        }
        css += "  }\n}\n";
        css += "html.theme-dark {\n";
        for (var _e = 0, darkEntries_4 = darkEntries; _e < darkEntries_4.length; _e++) {
            var _f = darkEntries_4[_e], name_6 = _f[0], defs = _f[1];
            var varName = "--token-".concat(name_6.slice(2), "-dark");
            css += "  ".concat(name_6, ": var(").concat(varName, ", ").concat(defs.dark, ");\n");
        }
        css += "}\n";
    }
    return css;
}
var outDir = (0, node_path_1.join)(__dirname, "..", "packages", "themes", "base");
(0, node_fs_1.writeFileSync)((0, node_path_1.join)(outDir, "tokens.static.css"), generateStaticCss(tokens_1.tokens));
(0, node_fs_1.writeFileSync)((0, node_path_1.join)(outDir, "tokens.dynamic.css"), generateDynamicCss(tokens_1.tokens));
console.log("â†’ tokens.static.css and tokens.dynamic.css generated");
