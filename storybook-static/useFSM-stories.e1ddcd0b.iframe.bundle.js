"use strict";(self.webpackChunkcms_monorepo=self.webpackChunkcms_monorepo||[]).push([[9578],{"./.storybook/stories/useFSM.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ToggleExample:()=>ToggleExample,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useFSM_stories});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/next@15.3.5_@babel+core@7.28.4_@opentelemetry+api@1.9.0_@playwright+test@1.53.2_react-d_b38198e836dabfde367dfef63fafdf09/node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/.pnpm/next@15.3.5_@babel+core@7.28.4_@opentelemetry+api@1.9.0_@playwright+test@1.53.2_react-d_b38198e836dabfde367dfef63fafdf09/node_modules/next/dist/compiled/react/index.js");class FSM{get state(){return this.current}send(event,fallback){const match=this.transitions.find(t=>t.from===this.current&&t.event===event);if(match)this.current=match.to;else{if(!fallback)throw new Error(`No transition for event ${event} from state ${this.current}`);this.current=fallback(event,this.current)}return this.current}constructor(transitions,initial){this.transitions=transitions,this.current=initial}}function useFSM(initial,transitions){const machineRef=(0,react.useRef)(function createFSM(initial,transitions){return new FSM(transitions,initial)}(initial,transitions)),[state,setState]=(0,react.useState)(machineRef.current.state);return{state,send:(0,react.useCallback)((event,fallback)=>{const next=machineRef.current.send(event,fallback);return setState(next),next},[])}}const useFSM_stories={title:"Hooks/useFSM",tags:["ci"],parameters:{docs:{description:{component:"`useFSM` wraps `createFSM` and keeps state in sync with React. Use `send` to trigger transitions."}}}},ToggleExample={render:()=>{const{state,send}=useFSM("off",[{from:"off",event:"toggle",to:"on"},{from:"on",event:"toggle",to:"off"}]);return(0,jsx_runtime.jsx)("button",{className:"rounded bg-blue-600 px-4 py-2 text-white",onClick:()=>send("toggle"),children:"on"===state?"Turn Off":"Turn On"})},play:async({canvasElement})=>{if(await Promise.resolve(),!canvasElement.querySelector("*")){const el=document.createElement("span");el.textContent="ready",canvasElement.appendChild(el)}},parameters:{docs:{source:{code:'const { state, send } = useFSM("off", [\n  { from: "off", event: "toggle", to: "on" },\n  { from: "on", event: "toggle", to: "off" },\n]);'}}}},__namedExportsOrder=["ToggleExample"];ToggleExample.parameters={...ToggleExample.parameters,docs:{...ToggleExample.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const transitions = [{\n      from: "off",\n      event: "toggle",\n      to: "on"\n    }, {\n      from: "on",\n      event: "toggle",\n      to: "off"\n    }] as const;\n    const {\n      state,\n      send\n    } = useFSM("off", transitions);\n    return <button className="rounded bg-blue-600 px-4 py-2 text-white" onClick={() => send("toggle")}>\n        {state === "on" ? "Turn Off" : "Turn On"}\n      </button>;\n  },\n  // Help the test-runner detect the story has rendered\n  play: async ({\n    canvasElement\n  }) => {\n    // Wait a microtask and assert there is content in the canvas\n    await Promise.resolve();\n    if (!canvasElement.querySelector(\'*\')) {\n      const el = document.createElement(\'span\');\n      el.textContent = \'ready\';\n      canvasElement.appendChild(el);\n    }\n  },\n  parameters: {\n    docs: {\n      source: {\n        code: `const { state, send } = useFSM("off", [\n  { from: "off", event: "toggle", to: "on" },\n  { from: "on", event: "toggle", to: "off" },\n]);`\n      }\n    }\n  }\n}',...ToggleExample.parameters?.docs?.source}}}}}]);