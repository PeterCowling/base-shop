// packages/ui/src/components/cms/page-builder/panels/LayoutPanel.tsx
"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Button, Input, Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "../../../atoms/shadcn";
import { Tooltip } from "../../../atoms";
export default function LayoutPanel({ component, handleInput, handleResize, handleFullSize, }) {
    const cssError = (prop, value) => value && !globalThis.CSS?.supports(prop, value)
        ? `Invalid ${prop} value`
        : undefined;
    return (_jsxs("div", { className: "space-y-2", children: [["Desktop", "Tablet", "Mobile"].map((vp) => (_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-end gap-2", children: [_jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: [`Width (${vp})`, _jsx(Tooltip, { text: "CSS width value with units", children: "?" })] }), placeholder: "e.g. 100px or 50%", value: component[`width${vp}`] ?? "", error: cssError("width", component[`width${vp}`]), onChange: (e) => handleResize(`width${vp}`, e.target.value) }), _jsx(Button, { type: "button", variant: "outline", onClick: () => handleFullSize(`width${vp}`), children: "Full width" })] }), _jsxs("div", { className: "flex items-end gap-2", children: [_jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: [`Height (${vp})`, _jsx(Tooltip, { text: "CSS height value with units", children: "?" })] }), placeholder: "e.g. 1px or 1rem", value: component[`height${vp}`] ??
                                    "", error: cssError("height", component[`height${vp}`]), onChange: (e) => handleResize(`height${vp}`, e.target.value) }), _jsx(Button, { type: "button", variant: "outline", onClick: () => handleFullSize(`height${vp}`), children: "Full height" })] })] }, vp))), _jsxs(Select, { value: component.position ?? "", onValueChange: (v) => handleInput("position", (v || undefined)), children: [_jsx(Tooltip, { text: "CSS position property", className: "block", children: _jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Position" }) }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "relative", children: "relative" }), _jsx(SelectItem, { value: "absolute", children: "absolute" })] })] }), component.position === "absolute" && (_jsxs(_Fragment, { children: [_jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: ["Top", _jsx(Tooltip, { text: "CSS top offset with units", children: "?" })] }), placeholder: "e.g. 10px", value: component.top ?? "", error: cssError("top", component.top), onChange: (e) => handleResize("top", e.target.value) }), _jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: ["Left", _jsx(Tooltip, { text: "CSS left offset with units", children: "?" })] }), placeholder: "e.g. 10px", value: component.left ?? "", error: cssError("left", component.left), onChange: (e) => handleResize("left", e.target.value) })] })), ["Desktop", "Tablet", "Mobile"].map((vp) => (_jsxs("div", { className: "space-y-2", children: [_jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: [`Margin (${vp})`, _jsx(Tooltip, { text: "CSS margin value with units", children: "?" })] }), placeholder: "e.g. 1rem", value: component[`margin${vp}`] ??
                            "", error: cssError("margin", component[`margin${vp}`]), onChange: (e) => handleResize(`margin${vp}`, e.target.value) }), _jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: [`Padding (${vp})`, _jsx(Tooltip, { text: "CSS padding value with units", children: "?" })] }), placeholder: "e.g. 1rem", value: component[`padding${vp}`] ??
                            "", error: cssError("padding", component[`padding${vp}`]), onChange: (e) => handleResize(`padding${vp}`, e.target.value) })] }, `spacing-${vp}`))), _jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: ["Margin", _jsx(Tooltip, { text: "Global CSS margin value with units", children: "?" })] }), placeholder: "e.g. 1rem", value: component.margin ?? "", error: cssError("margin", component.margin), onChange: (e) => handleInput("margin", e.target.value) }), _jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: ["Padding", _jsx(Tooltip, { text: "Global CSS padding value with units", children: "?" })] }), placeholder: "e.g. 1rem", value: component.padding ?? "", error: cssError("padding", component.padding), onChange: (e) => handleInput("padding", e.target.value) }), "gap" in component && (_jsx(Input, { label: _jsxs("span", { className: "flex items-center gap-1", children: ["Gap", _jsx(Tooltip, { text: "Gap between items", children: "?" })] }), placeholder: "e.g. 1rem", value: component.gap ?? "", error: cssError("gap", component.gap), onChange: (e) => handleInput("gap", e.target.value) }))] }));
}
