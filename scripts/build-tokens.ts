import { writeFileSync } from "fs";
import { join } from "path";
import { TokenMap, tokens } from "../packages/themes/base/tokens";

function generateStaticCss(map: TokenMap): string {
  let css = "/* Generated by build-tokens.ts */\n\n";
  css += ":root {\n";
  for (const [name, defs] of Object.entries(map)) {
    css += `  ${name}: ${defs.light};\n`;
  }
  css += "}\n";

  const darkEntries = Object.entries(map).filter(([_, d]) => d.dark);
  if (darkEntries.length) {
    css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
    for (const [name, defs] of darkEntries) {
      css += `    ${name}: ${defs.dark};\n`;
    }
    css += "  }\n}\n";
  }
  return css;
}

function generateDynamicCss(map: TokenMap): string {
  let css = "/* Generated by build-tokens.ts */\n\n";
  css += ":root {\n";
  for (const [name, defs] of Object.entries(map)) {
    const varName = `--token-${name.slice(2)}`;
    css += `  ${name}: var(${varName}, ${defs.light});\n`;
  }
  css += "}\n";

  const darkEntries = Object.entries(map).filter(([_, d]) => d.dark);
  if (darkEntries.length) {
    css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
    for (const [name, defs] of darkEntries) {
      const varName = `--token-${name.slice(2)}-dark`;
      css += `    ${name}: var(${varName}, ${defs.dark});\n`;
    }
    css += "  }\n}\n";
  }
  return css;
}

const outDir = join(__dirname, "..", "packages", "themes", "base");
writeFileSync(join(outDir, "tokens.static.css"), generateStaticCss(tokens));
writeFileSync(join(outDir, "tokens.dynamic.css"), generateDynamicCss(tokens));
