generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id    String @id
  /// @type {import("../../types/src/Shop").Shop}
  data  Json
  pages Page[]
  sections SectionTemplate[]
}

model Page {
  id     String @id @default(cuid())
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String
  slug   String
  data   Json
}

/// Reusable Sections (templates) curated per shop and inserted into pages
model SectionTemplate {
  id        String @id @default(cuid())
  shop      Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId    String
  label     String
  status    String // "draft" | "published"
  tags      Json?
  thumbnail String?
  data      Json

  @@index([shopId])
  @@index([shopId, status])
}

model RentalOrder {
  id                 String   @id
  shop               String
  sessionId          String
  deposit            Int
  expectedReturnDate String?
  startedAt          String
  returnedAt         String?
  refundedAt         String?
  damageFee          Int?
  customerId         String?
  riskLevel          String?
  riskScore          Int?
  flaggedForReview   Boolean? @default(false)
  trackingNumber     String?
  labelUrl           String?
  returnStatus       String?
  returnDueDate      String?
  returnReceivedAt   String?
  lateFeeCharged     Int?
  fulfilledAt        String?
  shippedAt          String?
  deliveredAt        String?
  cancelledAt        String?
  refundTotal        Int?
  status             String?

  @@unique([shop, sessionId])
  @@unique([shop, trackingNumber])
  @@index([customerId])
}

model SubscriptionUsage {
  id         String @id @default(cuid())
  shop       String
  customerId String
  month      String
  shipments  Int    @default(0)

  @@unique([shop, customerId, month])
}

model CustomerProfile {
  customerId String @id
  name       String
  email      String
}

model CustomerMfa {
  customerId String  @id
  secret     String
  enabled    Boolean @default(false)
}

model User {
  id                   String    @id
  email                String    @unique
  passwordHash         String
  role                 String
  resetToken           String?
  resetTokenExpiresAt  DateTime?
  emailVerified        Boolean   @default(false)
  stripeSubscriptionId String?
}

model InventoryItem {
  id                String   @id @default(cuid())
  shopId            String
  sku               String
  productId         String
  quantity          Int
  variantAttributes Json
  lowStockThreshold Int?
  wearCount         Int?
  wearAndTearLimit  Int?
  maintenanceCycle  Int?
  variantKey        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([shopId, sku, variantKey])
  @@index([shopId])
  @@index([shopId, sku])
}

model ReturnLogistics {
  id   Int  @id
  data Json
}

model ReverseLogisticsEvent {
  id        String @id @default(cuid())
  shop      String
  sessionId String
  event     String
  createdAt String

  @@index([shop])
}

model Setting {
  shop String @id
  data Json
}

model SettingDiff {
  id        String @id @default(cuid())
  shop      String
  timestamp String
  diff      Json

  @@index([shop])
}
