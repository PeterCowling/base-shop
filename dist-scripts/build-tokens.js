// /scripts/src/build-tokens.ts
/* eslint-disable no-console */
import { readdirSync, readFileSync, writeFileSync, existsSync } from "node:fs";
import path from "node:path";
import { createRequire } from "node:module";
import { fileURLToPath } from "node:url";
import { runInNewContext } from "node:vm";
import ts from "typescript";
import { tokens } from "../../packages/themes/base/src/tokens.js";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const require = createRequire(import.meta.url);
/* -------------------------------------------------------------------------- */
/*  Base theme                                                                */
/* -------------------------------------------------------------------------- */
function generateStaticCss(map) {
    let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
    for (const [name, defs] of Object.entries(map)) {
        css += `  ${name}: ${defs.light};\n`;
        if (defs.dark) {
            css += `  ${name}-dark: ${defs.dark};\n`;
        }
    }
    css += "}\n";
    const darkEntries = Object.entries(map).filter((e) => e[1].dark !== undefined);
    if (darkEntries.length) {
        css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
        for (const [name] of darkEntries) {
            css += `    ${name}: var(${name}-dark);\n`;
        }
        css += "  }\n}\n";
        css += "\nhtml.theme-dark {\n";
        for (const [name] of darkEntries) {
            css += `  ${name}: var(${name}-dark);\n`;
        }
        css += "}\n";
    }
    return css;
}
function generateDynamicCss(map) {
    let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
    for (const [name, defs] of Object.entries(map)) {
        const varName = `--token-${name.slice(2)}`;
        css += `  ${name}: var(${varName}, ${defs.light});\n`;
        if (defs.dark) {
            const darkVar = `--token-${name.slice(2)}-dark`;
            css += `  ${name}-dark: var(${darkVar}, ${defs.dark});\n`;
        }
    }
    css += "}\n";
    const darkEntries = Object.entries(map).filter((e) => e[1].dark !== undefined);
    if (darkEntries.length) {
        css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
        for (const [name] of darkEntries) {
            css += `    ${name}: var(${name}-dark);\n`;
        }
        css += "  }\n}\n";
        css += "\nhtml.theme-dark {\n";
        for (const [name] of darkEntries) {
            css += `  ${name}: var(${name}-dark);\n`;
        }
        css += "}\n";
    }
    return css;
}
const baseDir = path.resolve(__dirname, "..", "..", "packages", "themes", "base", "src");
writeFileSync(path.join(baseDir, "tokens.static.css"), generateStaticCss(tokens));
writeFileSync(path.join(baseDir, "tokens.dynamic.css"), generateDynamicCss(tokens));
console.log("→ tokens.static.css and tokens.dynamic.css generated");
/* -------------------------------------------------------------------------- */
/*  Extra themes                                                              */
/* -------------------------------------------------------------------------- */
function generateThemeCss(map) {
    let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
    for (const [name, val] of Object.entries(map)) {
        css += `  ${name}: ${val};\n`;
    }
    css += "}\n";
    return css;
}
async function buildThemeCss() {
    const themesDir = path.resolve(__dirname, "..", "..", "packages", "themes");
    const themes = readdirSync(themesDir, { withFileTypes: true })
        .filter((d) => d.isDirectory() && d.name !== "base")
        .map((d) => d.name)
        .filter((n) => existsSync(path.join(themesDir, n, "tailwind-tokens.ts")));
    for (const theme of themes) {
        const modPath = path.join(themesDir, theme, "tailwind-tokens.ts");
        const source = readFileSync(modPath, "utf8");
        const transpiled = ts.transpileModule(source, {
            compilerOptions: { module: ts.ModuleKind.CommonJS },
        }).outputText;
        const sandbox = {
            module: { exports: {} },
            exports: {},
            require,
        };
        sandbox.exports = sandbox.module.exports;
        runInNewContext(transpiled, sandbox);
        const themeTokens = sandbox.module.exports.tokens;
        const css = generateThemeCss(themeTokens);
        writeFileSync(path.join(themesDir, theme, "tokens.css"), css);
    }
}
buildThemeCss()
    .then(() => console.log("→ theme tokens generated"))
    .catch((err) => {
    console.error(err);
    process.exit(1);
});
