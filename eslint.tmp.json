[{"filePath":"/Users/petercowling/base-shop/packages/platform-core/__tests__/themeTokens.test.ts","messages":[{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#000'.","line":19,"column":24,"nodeType":"Literal","messageId":"noRawColor","endLine":19,"endColumn":73},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#000'.","line":37,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":37,"endColumn":45},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#111'.","line":92,"column":24,"nodeType":"Literal","messageId":"noRawColor","endLine":92,"endColumn":73},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#111'.","line":96,"column":46,"nodeType":"Literal","messageId":"noRawColor","endLine":96,"endColumn":52},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#fff'.","line":133,"column":7,"nodeType":"Literal","messageId":"noRawColor","endLine":133,"endColumn":67},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#fff'.","line":136,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":136,"endColumn":45},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#456'.","line":148,"column":7,"nodeType":"Literal","messageId":"noRawColor","endLine":148,"endColumn":56},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#456'.","line":151,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":151,"endColumn":45},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#123'.","line":163,"column":7,"nodeType":"Literal","messageId":"noRawColor","endLine":163,"endColumn":56},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#123'.","line":166,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":166,"endColumn":45},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#bcd'.","line":189,"column":24,"nodeType":"Literal","messageId":"noRawColor","endLine":189,"endColumn":73},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#bcd'.","line":194,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":194,"endColumn":45},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#def'.","line":203,"column":7,"nodeType":"Literal","messageId":"noRawColor","endLine":203,"endColumn":67},{"ruleId":"ds/no-raw-color","severity":2,"message":"Use color tokens instead of raw color '#def'.","line":206,"column":39,"nodeType":"Literal","messageId":"noRawColor","endLine":206,"endColumn":45}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from \"fs\";\nimport { join } from \"node:path\";\nimport * as themeTokens from \"../src/themeTokens\";\n\nconst { loadThemeTokensNode, loadThemeTokensBrowser, baseTokens } = themeTokens;\n\ndescribe(\"loadThemeTokensNode\", () => {\n  beforeEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it(\"selects first existing candidate\", () => {\n    const existsSpy = jest.spyOn(fs, \"existsSync\");\n    existsSpy.mockReturnValueOnce(false); // .js\n    existsSpy.mockReturnValueOnce(false); // .ts\n    existsSpy.mockReturnValueOnce(true); // src/tailwind-tokens.ts\n    jest\n      .spyOn(fs, \"readFileSync\")\n      .mockReturnValue(\"export const tokens = { '--color-bg': '#000' };\");\n    const tokens = loadThemeTokensNode(\"dark\");\n    const rootDir = join(__dirname, \"../../..\");\n    const calls = existsSpy.mock.calls.slice(-3);\n    expect(calls).toEqual([\n      [join(rootDir, \"packages\", \"themes\", \"dark\", \"tailwind-tokens.js\")],\n      [join(rootDir, \"packages\", \"themes\", \"dark\", \"tailwind-tokens.ts\")],\n      [\n        join(\n          rootDir,\n          \"packages\",\n          \"themes\",\n          \"dark\",\n          \"src\",\n          \"tailwind-tokens.ts\"\n        ),\n      ],\n    ]);\n    expect(tokens[\"--color-bg\"]).toBe(\"#000\");\n  });\n\n  it(\"returns empty object when no candidate exists\", () => {\n    jest.spyOn(fs, \"existsSync\").mockReturnValue(false);\n    const tokens = loadThemeTokensNode(\"dark\");\n    expect(tokens).toEqual({});\n  });\n\n  it(\"loads tokens from workspace root when local search fails\", () => {\n    const rootDir = join(__dirname, \"../../..\");\n    const cwd = join(rootDir, \"packages\", \"platform-core\");\n    const cwdSpy = jest.spyOn(process, \"cwd\").mockReturnValue(cwd);\n\n    let checkedTokens = false;\n    const existsSpy = jest\n      .spyOn(fs, \"existsSync\")\n      .mockImplementation((p: fs.PathLike) => {\n        const file = String(p);\n        if (file === join(cwd, \"pnpm-workspace.yaml\")) return false;\n        if (file === join(rootDir, \"packages\", \"pnpm-workspace.yaml\"))\n          return false;\n        if (file === join(rootDir, \"pnpm-workspace.yaml\")) return true;\n        if (\n          file ===\n          join(rootDir, \"packages\", \"themes\", \"dark\", \"tailwind-tokens.js\")\n        )\n          return false;\n        if (\n          file ===\n          join(rootDir, \"packages\", \"themes\", \"dark\", \"tailwind-tokens.ts\")\n        )\n          return false;\n        if (\n          file ===\n          join(\n            rootDir,\n            \"packages\",\n            \"themes\",\n            \"dark\",\n            \"src\",\n            \"tailwind-tokens.ts\"\n          )\n        ) {\n          if (!checkedTokens) {\n            checkedTokens = true;\n            return false;\n          }\n          return true;\n        }\n        return false;\n      });\n\n    const readSpy = jest\n      .spyOn(fs, \"readFileSync\")\n      .mockReturnValue(\"export const tokens = { '--color-bg': '#111' };\");\n\n    try {\n      const tokens = loadThemeTokensNode(\"dark\");\n      expect(tokens).toEqual({ \"--color-bg\": \"#111\" });\n    } finally {\n      readSpy.mockRestore();\n      existsSpy.mockRestore();\n      cwdSpy.mockRestore();\n    }\n  });\n\n  it(\"returns empty object when pnpm-workspace.yaml is missing\", () => {\n    const cwdSpy = jest.spyOn(process, \"cwd\").mockReturnValue(\"/tmp/fake\");\n    const existsSpy = jest.spyOn(fs, \"existsSync\").mockReturnValue(false);\n\n    try {\n      const tokens = loadThemeTokensNode(\"dark\");\n      expect(tokens).toEqual({});\n    } finally {\n      existsSpy.mockRestore();\n      cwdSpy.mockRestore();\n    }\n  });\n\n  it.each([\"\", \"base\"])(\"returns empty object for %s theme\", (theme) => {\n    const tokens = loadThemeTokensNode(theme as string);\n    expect(tokens).toEqual({});\n  });\n});\n\ndescribe(\"loadThemeTokensBrowser\", () => {\n  beforeEach(() => {\n    jest.resetModules();\n  });\n\n  it(\"loads tokens from @themes/<theme>\", async () => {\n    const dir = join(__dirname, \"../../themes/custom/src\");\n    fs.mkdirSync(dir, { recursive: true });\n    fs.writeFileSync(\n      join(dir, \"index.ts\"),\n      \"export const tokens = { '--color-bg': { light: '#fff' } };\"\n    );\n    const tokens = await loadThemeTokensBrowser(\"custom\");\n    expect(tokens[\"--color-bg\"]).toBe(\"#fff\");\n    fs.rmSync(join(__dirname, \"../../themes/custom\"), {\n      recursive: true,\n      force: true,\n    });\n  });\n\n  it(\"supports string token values\", async () => {\n    const dir = join(__dirname, \"../../themes/plain/src\");\n    fs.mkdirSync(dir, { recursive: true });\n    fs.writeFileSync(\n      join(dir, \"index.ts\"),\n      \"export const tokens = { '--color-bg': '#456' };\"\n    );\n    const tokens = await loadThemeTokensBrowser(\"plain\");\n    expect(tokens[\"--color-bg\"]).toBe(\"#456\");\n    fs.rmSync(join(__dirname, \"../../themes/plain\"), {\n      recursive: true,\n      force: true,\n    });\n  });\n\n  it(\"falls back to tailwind-tokens when direct import fails\", async () => {\n    const dir = join(__dirname, \"../../themes/fallback/tailwind-tokens/src\");\n    fs.mkdirSync(dir, { recursive: true });\n    fs.writeFileSync(\n      join(dir, \"index.ts\"),\n      \"export const tokens = { '--color-bg': '#123' };\"\n    );\n    const tokens = await loadThemeTokensBrowser(\"fallback\");\n    expect(tokens[\"--color-bg\"]).toBe(\"#123\");\n    fs.rmSync(join(__dirname, \"../../themes/fallback\"), {\n      recursive: true,\n      force: true,\n    });\n  });\n\n  it(\"short-circuits for base theme\", async () => {\n    const tokens = await loadThemeTokensBrowser(\"base\");\n    expect(tokens).toBe(baseTokens);\n  });\n\n  it(\"returns base tokens when all imports fail\", async () => {\n    const tokens = await loadThemeTokensBrowser(\"missing-theme\");\n    expect(tokens).toBe(baseTokens);\n  });\n});\n\ndescribe(\"loadThemeTokens\", () => {\n  it(\"delegates to node implementation when window is undefined\", async () => {\n    jest.spyOn(fs, \"existsSync\").mockReturnValue(true);\n    jest\n      .spyOn(fs, \"readFileSync\")\n      .mockReturnValue(\"export const tokens = { '--color-bg': '#bcd' };\");\n    const original = global.window;\n    // @ts-expect-error - simulate Node environment\n    delete global.window;\n    const tokens = await themeTokens.loadThemeTokens(\"dark\");\n    expect(tokens[\"--color-bg\"]).toBe(\"#bcd\");\n    global.window = original;\n  });\n\n  it(\"delegates to browser implementation when window is defined\", async () => {\n    const dir = join(__dirname, \"../../themes/delegation/src\");\n    fs.mkdirSync(dir, { recursive: true });\n    fs.writeFileSync(\n      join(dir, \"index.ts\"),\n      \"export const tokens = { '--color-bg': { light: '#def' } };\"\n    );\n    const tokens = await themeTokens.loadThemeTokens(\"delegation\");\n    expect(tokens[\"--color-bg\"]).toBe(\"#def\");\n    fs.rmSync(join(__dirname, \"../../themes/delegation\"), {\n      recursive: true,\n      force: true,\n    });\n  });\n});\n","usedDeprecatedRules":[]}]