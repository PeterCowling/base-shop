// /scripts/src/build-tokens.ts
/* eslint-disable no-console */

import { existsSync, readdirSync, readFileSync, writeFileSync } from "node:fs";
import { createRequire } from "node:module";
import path from "node:path";
import { fileURLToPath } from "node:url";
import { runInNewContext } from "node:vm";
import ts from "typescript";

export interface Token {
  readonly light: string;
  readonly dark?: string;
}
export type TokenMap = Record<`--${string}`, Token>;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const require = createRequire(import.meta.url);
const tokensPath = path.resolve(
  __dirname,
  "..",
  "..",
  "packages",
  "themes",
  "base",
  "tokens.js"
);
const { tokens } = require(tokensPath) as { tokens: TokenMap };

/* -------------------------------------------------------------------------- */
/*  Base theme                                                                */
/* -------------------------------------------------------------------------- */

function generateStaticCss(map: TokenMap): string {
  let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
  const darkEntries: [string, { light: string; dark: string }][] = [];
  for (const [name, defs] of Object.entries(map)) {
    css += `  ${name}: ${defs.light};\n`;
    if (defs.dark !== undefined) {
      css += `  ${name}-dark: ${defs.dark};\n`;
      darkEntries.push([name, defs as { light: string; dark: string }]);
    }
  }
  css += "}\n";

  if (darkEntries.length) {
    css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
    for (const [name] of darkEntries) {
      css += `    ${name}: var(${name}-dark);\n`;
    }
    css += "  }\n}\n";

    css += "\nhtml.theme-dark {\n";
    for (const [name] of darkEntries) {
      css += `  ${name}: var(${name}-dark);\n`;
    }
    css += "}\n";
  }
  return css;
}

function generateDynamicCss(map: TokenMap): string {
  let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
  const darkEntries: [string, { light: string; dark: string }][] = [];
  for (const [name, defs] of Object.entries(map)) {
    const varName = `--token-${name.slice(2)}`;
    css += `  ${name}: var(${varName}, ${defs.light});\n`;
    if (defs.dark !== undefined) {
      const darkVar = `--token-${name.slice(2)}-dark`;
      css += `  ${name}-dark: var(${darkVar}, ${defs.dark});\n`;
      darkEntries.push([name, defs as { light: string; dark: string }]);
    }
  }
  css += "}\n";

  if (darkEntries.length) {
    css += "\n@media (prefers-color-scheme: dark) {\n  :root {\n";
    for (const [name] of darkEntries) {
      css += `    ${name}: var(${name}-dark);\n`;
    }
    css += "  }\n}\n";

    css += "\nhtml.theme-dark {\n";
    for (const [name] of darkEntries) {
      css += `  ${name}: var(${name}-dark);\n`;
    }
    css += "}\n";
  }
  return css;
}

const baseDir = path.resolve(
  __dirname,
  "..",
  "..",
  "packages",
  "themes",
  "base"
);
writeFileSync(
  path.join(baseDir, "tokens.static.css"),
  generateStaticCss(tokens)
);
writeFileSync(
  path.join(baseDir, "tokens.dynamic.css"),
  generateDynamicCss(tokens)
);

console.log("→ tokens.static.css and tokens.dynamic.css generated");

/* -------------------------------------------------------------------------- */
/*  Extra themes                                                              */
/* -------------------------------------------------------------------------- */

function generateThemeCss(map: Record<string, string>): string {
  let css = "/* Generated by build-tokens.ts */\n\n:root {\n";
  for (const [name, val] of Object.entries(map)) {
    css += `  ${name}: ${val};\n`;
  }
  css += "}\n";
  return css;
}

async function buildThemeCss(): Promise<void> {
  const themesDir = path.resolve(__dirname, "..", "..", "packages", "themes");
  const themes = readdirSync(themesDir, { withFileTypes: true })
    .filter((d) => d.isDirectory() && d.name !== "base")
    .map((d) => d.name);

  for (const theme of themes) {
    const modPath = path.join(themesDir, theme, "tailwind-tokens.ts");
    if (!existsSync(modPath)) continue;
    const source = readFileSync(modPath, "utf8");
    const transpiled = ts.transpileModule(source, {
      compilerOptions: { module: ts.ModuleKind.CommonJS },
    }).outputText;

    const sandbox: {
      module: { exports: any };
      exports: any;
      require: NodeRequire;
    } = {
      module: { exports: {} },
      exports: {},
      require,
    };
    sandbox.exports = sandbox.module.exports;
    runInNewContext(transpiled, sandbox);

    const themeTokens = sandbox.module.exports.tokens as Record<string, string>;
    const css = generateThemeCss(themeTokens);
    writeFileSync(path.join(themesDir, theme, "tokens.css"), css);
  }
}

buildThemeCss()
  .then(() => console.log("→ theme tokens generated"))
  .catch((err) => {
    console.error(err);
    process.exit(1);
  });
